/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.jarves.formularios;


import br.com.jarves.bancodedados.ProdutoDAO;
import br.com.jarves.classes.Produtos;
import br.com.jarves.classes.TableFormat;
import br.com.jarves.classes.Util;
import br.com.jarves.util.Global;
import java.awt.Dimension;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Humberto
 */
public class jifConHistProduto extends javax.swing.JInternalFrame {

    /**
     * Creates new form jifConEnd
     */
    public jifConHistProduto() {
        initComponents();
        carregaLista();
        
        //jtbEndereco.setModel(DbUtils.resultSetToTableModel(EnderecoDAO.listarEnderecos()));
    }
   
public int flag;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgProdutos = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        lblCodDes = new javax.swing.JLabel();
        jtfCodigo = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbEndereco = new javax.swing.JTable();
        jbtVoltar = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setTitle("Consulta de Endereços");
        getContentPane().setLayout(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Consulta de Produtos"));
        jPanel2.setLayout(null);

        lblCodDes.setText("Código:");
        jPanel2.add(lblCodDes);
        lblCodDes.setBounds(30, 60, 80, 20);

        jtfCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfCodigoActionPerformed(evt);
            }
        });
        jtfCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodigoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfCodigoKeyReleased(evt);
            }
        });
        jPanel2.add(jtfCodigo);
        jtfCodigo.setBounds(90, 50, 280, 30);
        jPanel2.add(jSeparator1);
        jSeparator1.setBounds(10, 130, 760, 20);

        jtbEndereco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbEndereco.setToolTipText("Lista de Endereços");
        jtbEndereco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbEnderecoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbEndereco);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 160, 760, 170);

        jbtVoltar.setText("Sair");
        jbtVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtVoltarActionPerformed(evt);
            }
        });
        jPanel2.add(jbtVoltar);
        jbtVoltar.setBounds(430, 50, 100, 40);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 0, 780, 340);

        getAccessibleContext().setAccessibleName("Consulta de Produtos");

        setBounds(0, 0, 791, 377);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbtVoltarActionPerformed

    private void jtfCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoKeyReleased
            
    }//GEN-LAST:event_jtfCodigoKeyReleased

    private void jtfCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfCodigoActionPerformed
        
    }//GEN-LAST:event_jtfCodigoActionPerformed

    private void jtbEnderecoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbEnderecoMouseClicked
        if(evt.getClickCount()>1){
            if (flag ==1){
                int indiceLinha = jtbEndereco.getSelectedRow();
                Object cep = jtbEndereco.getValueAt(indiceLinha, 2);
                Global.jtfCep.setText(cep.toString());
                
                Global.jtfCep.grabFocus();
                flag =0;
                this.dispose();
            }else if (flag ==2){
                int indiceLinha = jtbEndereco.getSelectedRow();
                Object cep = jtbEndereco.getValueAt(indiceLinha, 2);
                Global.jtfCep.setText(cep.toString());
                
                Global.jtfCep.grabFocus();
                flag =0;
                this.dispose();
            }
           
       }
      
    }//GEN-LAST:event_jtbEnderecoMouseClicked

    private void jtfCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoKeyPressed
       if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
           filtraLista();
       }
    }//GEN-LAST:event_jtfCodigoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbtVoltar;
    private javax.swing.JTable jtbEndereco;
    private javax.swing.JTextField jtfCodigo;
    private javax.swing.JLabel lblCodDes;
    private javax.swing.ButtonGroup rbgProdutos;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para alinhar o internal frame no meio da tela
     */
    public void setPosicao() {  
        Dimension d = this.getDesktopPane().getSize();  
        this.setLocation((d.width - this.getSize().width) / 2, 0);
    }
    
    public void carregaLista(){
        
        String titulo[] = {"Descricão","Unidade","Categoria","Compra R$","Imposto %","Lucro %","Venda R$","Dt Inicio Preço","Dt Fim Preço"};
        Object dados [][]={};
        DefaultTableModel modelo = new DefaultTableModel(dados,titulo){
            public boolean isCellEditable(int row,int column){
                return false;
            }
        };
        jtbEndereco.setDefaultRenderer(Object.class,new TableFormat());
        jtbEndereco.setModel(modelo);
        
               
    }
    public void filtraLista(){
        
  
        Util u = new Util();
        String titulo[] = {"Descricão","Unidade","Categoria","Compra R$","Imposto %","Lucro %","Venda R$","Dt Inicio Preço","Dt Fim Preço"};
        Object dados [][]={};
        DefaultTableModel modelo = new DefaultTableModel(dados,titulo){
            public boolean isCellEditable(int row,int column){
                return false;
            }
        };
        jtbEndereco.setDefaultRenderer(Object.class,new TableFormat());
        jtbEndereco.setModel(modelo);
        
        
        ArrayList<Produtos> lista = new ProdutoDAO().listarHistProdutosDesc(jtfCodigo.getText().trim());
        if(lista.size()>0){
            for (Produtos lista1 : lista) {
                modelo.addRow(new String[]{lista1.getDescricao(), lista1.getUnidade(), lista1.getCategoria().getNomeCategoria(), NumberFormat.getCurrencyInstance().format(lista1.getPrecoProduto().getPrecoCompra()).replace("R$ ", ""), NumberFormat.getCurrencyInstance().format(lista1.getPrecoProduto().getImposto()).replace("R$ ", ""), NumberFormat.getCurrencyInstance().format(lista1.getPrecoProduto().getLucro()).replace("R$ ", ""), NumberFormat.getCurrencyInstance().format(lista1.getPrecoProduto().getPrecoVenda()).replace("R$ ", ""), u.reformataData(lista1.getPrecoProduto().getDtInicio()), u.reformataData(lista1.getPrecoProduto().getDtFim())});
            }
        }else{
            JOptionPane.showMessageDialog(null, "Produto Não Localizado!");
        }
    }
        
    
}

